OpenStack - комплекс проектов свободного программного обеспечения, 
который может быть использован для создания инфраструктурных облачных сервисов и облачных хранилищ, 
при том как публичных, так и частных. 
Все проекты комплекса распространяются под лицензией Apache License.

-------------------------------------------------------------------

GNU Compiler Collection (обычно используется сокращение GCC) — набор компиляторов для различных языков программирования, 
разработанный в рамках проекта GNU. 
GCC является свободным программным обеспечением, распространяется в том числе фондом свободного программного обеспечения 
(FSF) на условиях GNU GPL и GNU LGPL и является ключевым компонентом GNU toolchain. 
Он используется как стандартный компилятор для свободных UNIX-подобных операционных систем.

Изначально названный GNU C Compiler поддерживал только язык Си. 
Позднее GCC был расширен для компиляции исходных кодов на таких языках программирования, 
как C++, Objective-C, Java (исключена из состава GCC начиная с версии 7 в 2017 году[5]), 
Фортран, Ada, Go, GAS и D.

-------------------------------------------------------------------

Что такое «оболочка» (shell) в Linux?
Оболочка (англ. shell) — это программа, которая служит посредником между пользователем и операционной системой. 
Она принимает команды от пользователя (введённые в терминале или из скрипта), интерпретирует их и передаёт ядру Linux (ядру — kernel) для выполнения.

Но cd не является отдельной программой — это встроенная функция самой оболочки (bash, zsh и др.).
Поэтому which не может найти соответствующий файл.

В Linux и других Unix-подобных системах команды бывают двух типов:
Внешние — это отдельные программы, 
хранящиеся в файлах (например, /bin/ls, /usr/bin/grep).

Встроенные (builtin) — это команды, которые являются частью самой оболочки 
(bash, zsh, sh и др.) и выполняются без запуска нового процесса.

1. Основные функции оболочки

Интерфейс командной строки (CLI)
Позволяет вводить команды вручную (например, ls, cd, grep).
Примеры оболочек: bash, zsh, fish, dash.
Исполнение скриптов
Запускает файлы с командами (например, ./script.sh).
Управление процессами
Запуск, остановка и управление программами (например, &, Ctrl+C, jobs).
Работа с переменными и окружением
Хранение настроек (PATH, HOME), создание своих переменных.
Перенаправление ввода/вывода
Контроль потоков данных (>, |, <).

2. Виды оболочек

Разные оболочки имеют свои особенности:
Оболочка	Описание
bash	Стандартная оболочка в большинстве Linux-дистрибутивов. Поддержка истории, автодополнения.
zsh	Улучшенная версия bash с подсказками, темами (используется в macOS по умолчанию).
fish	Дружелюбная к новичкам: подсветка синтаксиса, интерактивные подсказки.
dash	Минималистичная, быстрая (используется для системных скриптов в Debian/Ubuntu).
sh	Старая оболочка (Bourne shell), часто является симлинком на bash или dash.

-------------------------------------------------------------------

Утилита man (от manual — руководство) — это встроенная справочная система Linux, 
которая отображает официальную документацию по командам, программам, 
системным вызовам и конфигурационным файлам.

-------------------------------------------------------------------

разница which и whereis

which - Ищет только исполняемый файл команды в $PATH.

whereis - Ищет все связанные файлы: бинарник, документацию (man), исходники.

$PATH — это системная переменная окружения, которая содержит список директорий, 
где Linux ищет исполняемые файлы (программы и команды). 
Когда вы вводите команду (например, ls, python), система просматривает 
эти директории по порядку и запускает первый найденный совпадающий файл.

which date
/usr/bin/date

which nano
/usr/bin/nano

which mc
/usr/bin/mc

-------------------------------------------------------------------

boot - файлы ядра системы
cdrom - монтируются диски
dev - device - все железо представлено в виде файлов

в root не создавать никаких файлов (корневая директория)

etc - все сетевые службы которые запускаются
+ содержатся все конфиги

media - монтируются флешки
opt - различный софт
proc - маппинг всех процессов запущенных в системе
snap - новый пакетный менеджер (изоляция приложений)
var - здесь хранятся сайти и логи

-------------------------------------------------------------------

абсолютный путь - путь от корневой директории файловой системы
относительный путь - путь от директории в которой находимся

touch - меняет время изменения файла

nano и vim - меняют дату создания

sudo tail -f 'name' отслеживание записи файла реалтайм

soft link - ссылка на название файла
hard link - ссылка на индексный дескриптор

-------------------------------------------------------------------

touch - используется для создания файлов
cat - для просмотра содержимого
less — это стандартная утилита в Linux и Unix-подобных системах для просмотра содержимого файлов постранично или построчно. 
Она позволяет удобно читать большие файлы, не загружая их полностью в память (в отличие от, например, cat).

-------------------------------------------------------------------

Пользователь www-data — это системный пользователь, 
созданный для безопасного запуска веб-серверов 
(например, Apache, Nginx) и обработки веб-контента.

-------------------------------------------------------------------

grub - загрузчик операционной системы
grep - в Linux используется для поиска строк в файле или потоке данных, 
которые соответствуют заданному шаблону. 
Она поддерживает регулярные выражения, что делает её мощным инструментом для фильтрации текста

STDIN поток ввода
STDOUT поток вывода
STDERR поток ошибок

Выставить русскую локаль в Linux:

sudo apt install language-pack-ru
sudo dpkg-reconfigure locales
reboot

-------------------------------------------------------------------
Дома:
как посмотреть какие порты открыты на локальной и удаленной машине
(по сети можно зайти только в те порты, которые открыты сетевыми службами)

как расшифровывается каждое значение в /etc/passwd/
хак пароля из /etc/shadow/

каналы команд
как направить и поток ошибок и обычный поток в 1 файл
разобрать как работает пайп в линукс env | grep PATH | grep bin


Разные оболочки (bash, zsh, sh, fish) могут отличаться по синтаксису команд, 
встроенных функций и переменных.
чем отличаются разные оболочки?

Совместимость

sh (Bourne Shell) — более базовый, но работает практически везде.
bash (Bourne Again Shell) — расширенная версия sh, стандарт в большинстве Linux-дистрибутивов.
zsh — улучшенная версия bash с автодополнением и настройками.
fish — максимально удобный, но менее совместимый с POSIX-скриптами.

-------------------------------------------------------------------
 
shell - 

переменные хранятся в 
куче - если структура динамическая (очередь, массив)
стек - хранит постоянные данные (аргументы и функции)

операторы есть:
бинарные - 2 операнда (сравнение присвоение)
унарные - 1 операнд (-+* и т.д.)
тернарные 

bash
присвоение
a=275
hello=$a

деструктурирующее присваивание:

a=23
b=45

a,b=b,a

echo a
echo b

проверка условия:
 
коды возврата линукса:
256

получить код возврата последней выполненной программы
echo &?

AST - интерпретирующая машина

проверка прав доступа к файлу

-------------------------------------------------------------------
в винде графическая система вшита в ядро

init 0 - выключение компа

init 6 - перезагрузка компа

какой айдишник у инит процесса? частый вопрос собеса на го

зомби процесс - 

кластер - распределенные сервисы

атрибуты процессов:
PID - идентификатор процесса
PPID - идентификатор родительского процесса

запущенный процесс становится файлом и кладется в папку
/etc/proc

посмотреть дерево процессов:
pstree -p

диаграмма перехода процессов линукс

kernel space
user space

jobs - наименование процессов которые отвязаны от консоли

deamon - тоже процесс, но это процесс демон

приоритеты выполнения процессов:

-------------------------------------------------------------------
GIT

GitHub
GitLub
BitBucket

origin - наименование удалленного репозитория
untracker file - файл на ходится в working directory

git conventional commints

-------------------------------------------------------------------

Учетная запись системного администратора с привилегированными (а точнее —
неограниченными в буквальном смысле) правами доступа обычно называется root
и всегда имеет идентификатор UID=6. Учетные записи, «от лица которых» выполняются \
процессы системных служб, называются псевдопользовательскими и идентифицируются 
в диапазоне UID=1—499 или UID=1—999, а начиная с UID=500 (redhat) или
UID=1000 (debian) и далее
идентифицируются учетные записи обычных пользователей.

Нужно заметить, что в Ubuntu Linux пароль суперпользователя root заблокирован,
что не позволяет использовать учетную запись как «обычную» для регистрации в
системе и превращает ее в «ролевую». Как следствие, привилегиями «роли» супер
пользователя можно пользоваться лишь при помощи sudo и только непривилегиро
ванным пользователям, явно указанным в правилах передачи sudoers(5).

Специальные файлы и каталоги, сохраняющие конфигурационные параметры, по
соглашению имеют имена, начинающиеся с точки (англ, dot — точка), располага
ются в домашнем каталоге пользователя и носят название dot-файлов.