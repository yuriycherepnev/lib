1. Shell — это общее понятие
Shell (командная оболочка) — интерпретатор команд, который позволяет 
пользователю взаимодействовать с операционной системой (Linux, macOS, Unix).
Существует много разных shell'ов, например:

sh (Bourne Shell) — одна из первых оболочек (1979 г.).
bash (Bourne-Again Shell) — улучшенная версия sh, самая популярная сегодня.
zsh (Z Shell) — расширенная оболочка с удобными фичами (используется в macOS по умолчанию).
ksh (Korn Shell), csh (C Shell), fish (Friendly Interactive Shell) и др.

2. Bash — это конкретная реализация shell, одна из её разновидностей, 
созданная как замена sh с дополнительными возможностями.

-------------------------------------------------------------------
операторы сравнения bash:

числа:

==	-eq	Равно	(( a == b ))	[ "$a" -eq "$b" ]
!=	-ne	Не равно	(( a != b ))	[ "$a" -ne "$b" ]
>	-gt	Больше	(( a > b ))	[ "$a" -gt "$b" ]
<	-lt	Меньше	(( a < b ))	[ "$a" -lt "$b" ]
>=	-ge	Больше или равно	(( a >= b ))	[ "$a" -ge "$b" ]
<=	-le	Меньше или равно	(( a <= b ))	[ "$a" -le "$b" ]

if (( a < b )); then
    echo "a меньше b"
fi

строки:

== / =	Равно [[ "$str1" == "$str2" ]]
!=	Не равно [[ "$str1" != "$str2" ]]

if [[ "$str1" == "hello" ]]; then
    echo "Строка равна 'hello'"
fi

проверка файлов:

-e	Файл существует	[ -e "file.txt" ]
-f	Обычный файл (не каталог/ссылка)	[ -f "file.txt" ]
-d	Каталог	[ -d "dir" ]
-s	Файл не пуст	[ -s "file.txt" ]
-r	Доступен для чтения	[ -r "file.txt" ]
-w	Доступен для записи	[ -w "file.txt" ]
-x	Исполняемый	[ -x "script.sh" ]
-L	Символическая ссылка	[ -L "link" ]
-nt	Новее (по дате изменения)	[ "file1" -nt "file2" ]
-ot	Старше (по дате изменения)	[ "file1" -ot "file2" ]

if [ -f "/etc/passwd" ]; then
    echo "Файл существует"
fi

-------------------------------------------------------------------
$(...) - Подстановка результата команды

current_emails=$(cat game.txt)

-------------------------------------------------------------------
шаблонные строки - используются чтобы вывести переменную в строке баш скрипта (такие же как в js):

echo "Found 42 ${type}s"

обьявление массива:

allThreads=(1 2 4 8 16 32 64 128)

вывод элемента массива:

echo ${allThreads[1]}

вывод всех элементов массива:

echo ${allThreads[@]}

присоединение новых данных к массиву:

myArray+=( "newElement1" "newElement2" )

-------------------------------------------------------------------

arr=()  Создание пустого массива
arr=(1 2 3) Инициализация массива
${arr[2]}   Получение третьего элемента массива
${arr[@]}   Получение всех элементов массива
${!arr[@]}  Получение индексов массива
${#arr[@]}  Вычисление размера массива
arr[0]=3    Перезапись первого элемента массива
arr+=(4)    Присоединение к массиву значения
str=$(ls)   Сохранение вывода команды ls в виде строки
arr=( $(ls) )   Сохранение вывода команды ls в виде массива имён файлов
${arr[@]:s:n}   Получение элементов массива начиная с элемента с индексом s до элемента с индексом s+(n-1)

-------------------------------------------------------------------
Захват вывода команды:

output=$( ./my_script.sh )

-------------------------------------------------------------------
