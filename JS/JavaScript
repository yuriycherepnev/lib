reduce() применяет функцию reducer к каждому элементу массива (слева-направо), возвращая одно результирующее значение.

let items = [
  {a: "test1", b: 200},
  {a: "test2", b: 50},
  {a: "test3", b: 700}
];

let max = (items.reduce((calc, current) => calc.b < current.b ? calc : current)).b;
console.log(max);

Колво элементов true в массиве обьектов:

let max = array.reduce((calc, current) => current.bool == true ? calc + 1 : calc + 0, 0);
или
let max = (calc, current) => current.inStore ? calc + 1 : calc, 0)


простой reduce():

const totalCount = row.orderGoods.reduce((current: number, next: OrderGoodItem) => {
    return current + next.qnt
}, 0);

const totalPrice = row.orderGoods.reduce((current: number, next: OrderGoodItem) => {
    return current + next.price * next.qnt
}, 0);

--------------------------------------------------------------------
map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.

--------------------------------------------------------------------

find() возвращает значение первого найденного в массиве элемента, которое удовлетворяет условию переданному в callback функции. В противном случае возвращается undefined.

const findItem = items.find(current => current.b == 200);

--------------------------------------------------------------------

Чет нечет:

10 % 2 == 0
true

21 % 2 == 0
true

--------------------------------------------------------------------
Редирект реакт:

import {useNavigate, useParams} from "react-router-dom";

const navigate = useNavigate();

navigate(`/admin/news/`);

--------------------------------------------------------------------
Сумма разных элементов массива обьектов:

const sumPrice = cartList.cart.map(item => item.price * item.qnt).reduce((prev, curr) => prev + curr, 0);

--------------------------------------------------------------------

Поиск в массиве js

let available = array.find(elem => elem.idGood == idGood);

array.find(elem => elem.idGood == coll[i]);

--------------------------------------------------------------------
Сортировка массива:

const bubbleSort = (coll) => {
  let stepsCount = coll.length - 1;
  let swapped;
  do {
    swapped = false;
    for (let i = 0; i < stepsCount; i += 1) {
      if (coll[i] > coll[i + 1]) {
        const temp = coll[i];
        coll[i] = coll[i + 1];
        coll[i + 1] = temp;
        swapped = true;
      }
    }
    stepsCount -= 1;
  } while (swapped); // продолжаем, пока swapped === true
  return coll;
};

console.log(bubbleSort([3, 2, 10, -2, 0]));

    const storeSort = (cartList: any, storeItem: any) => {
        let stepsCount = cartList.length - 1;
        let swapped;
        do {
            swapped = false;
            for (let i = 0; i < stepsCount; i += 1) {
                if (!storeItem.cart.find((elem: { idGood: any; }) => elem.idGood == cartList[i].idGood)) {
                    const temp = cartList[i];
                    cartList[i] = cartList[i + 1];
                    cartList[i + 1] = temp;
                    swapped = true;
                }
            }
            stepsCount -= 1;
        } while (swapped);
        return cartList;
    };

    storeSort(cartList, storeItem);

--------------------------------------------------------------------
Функциональынй компонент реакт:

export interface SearchFilterProps {
    name: string;
    setName: Dispatch<SetStateAction<string>>;
    label: string;
}

const SearchItem = ({name, setName, label}: SearchFilterProps) => {
    return (
        <>
        </>
    );
};

export default SearchItem;

--------------------------------------------------------------------
Ширина блоков:
 <Grid container spacing={2}>
  <Grid item xs={4} /*sm={12} md={12} lg={3}*/>
  </Grid>
</Grid>

--------------------------------------------------------------------
Условный рендеринг:

{ count && <h1>Количество сообщений: {count}</h1>}

<b>{isLoggedIn ? 'сейчас' : 'не'}</b>

--------------------------------------------------------------------
Sticky блок:

npm install react-sticky

<StickyContainer style={{ height: "5000px", outline: "1px solid" }}>
  <Sticky>{({ style }) => <div style={style}>Sticky thing!</div>}</Sticky>
</StickyContainer>

--------------------------------------------------------------------

sx={{ display: { xs: 'none', md: 'block' }

--------------------------------------------------------------------
Превью изображения в инпуте реакт:

    const [selectedImg, setSelectedImg] = useState<string>('');
    
       <Input
                            inputProps={{
                                accept: "application/jpeg, application/jpg, application/pdf, image/*",
                            }}
                            sx={{display: 'none'}}
                            type="file"
                            name="img"
                            id="img-loader-button"
                            key={Date.now()}
                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                                if (event.currentTarget.files) {
                                    setValue('img', event.currentTarget.files[0]);
                                    const objectUrl = URL.createObjectURL(event.currentTarget.files[0]);
                                    setSelectedImg(objectUrl);
                                }
                            }}
                        />


                             {
                            selectedImg && <CardMedia
                                sx={{height: '200px', width: '300px', backgroundSize: 'cover'}}
                                style={{backgroundImage: `url(${selectedImg})`}}>
                            </CardMedia>
                        }


--------------------------------------------------------------------
Передача параметров в гет запросе react toolKit:

fetchBrandList: build.query<ResponseGeneric<BrandItemInterface[]>, any>({
    query: (arg) => ({
        url: 'brand',
        method: 'GET',
        params: arg
    }),
}),

--------------------------------------------------------------------
Адаптивные блоки реакт:

<Grid key={item.id} item xs={12} sm={6} md={!openSidebar ? 3 : 4} lg={3}>
    <NewsCard item={item}/>
</Grid>

--------------------------------------------------------------------
функциональный компонент с дженериком:
(с расширением свойств для дженерика)

interface IControllerInterface<T> {
    items?: T[];
    name: string;
}

export default function ControllerSelect<T extends { id?: number, name: string }>
({items, name, label}: IControllerInterface<T>): JSX.Element {
    return (
        <></>
    )
}

<ControllerSelect<TagItemInterface> items={tags} name={'idTag'} label={'Тип'}/>

--------------------------------------------------------------------
Вытащить ошибки из useForm:

const {handleSubmit, reset, formState: { errors }} = methods;

--------------------------------------------------------------------
Кастомная валидация функцией yup:

export function validTotalPrice(this: yup.NumberSchema, message: string) {
    return this.test("totalPrice", message, function (totalPrice: number | undefined, validObject: yup.TestContext) {
        const { path, createError } = this;
        if (validObject.parent.idContractor && totalPrice && totalPrice > validObject.parent.idContractor.limit.limitReal) {
            return createError({ path, message: message ?? 'Сумма заказа превышает лимит' });
        }
        return true;
    });
}

yup.addMethod(yup.number, 'validTotalPrice', validTotalPrice);

const ValidateSchema = yup.object().shape({
    totalPrice: (yup as any).number().validTotalPrice(),
})

--------------------------------------------------------------------
Скачивание файла реакт:

const fetchApi = async (url: string, headers?: HeadersInit) => {
    return fetch(process.env.REACT_APP_API + url, {
        headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
            ...headers
        }
    })
}

export const downloadFileApi = async (filename: string, url: string, headers?: HeadersInit): Promise<boolean> => {
    const response = await fetchApi(url, headers)

    if (response.status === 200) {
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        link.remove();

        return true;
    }

    return false
}

--------------------------------------------------------------------

Тип функция react:

setPageCustom?: (value: number) => void;

--------------------------------------------------------------------
Загрузка html react:

brandItem?.text && (
    <Stack sx={{pt: 3}}>
        <Card sx={{p: 1}}>
            <Stack
                className="view ql-editor"
                dangerouslySetInnerHTML={{__html: brandItem.text}}/>
            </Card>
        </Stack>
    )}

--------------------------------------------------------------------
Очистка поля перед вставкой:

.on('paste', function (e) {
    e.target.value = '';
})

--------------------------------------------------------------------
Reduce с условием:

rest.reduce((previousValue: string, currentValue) => {
                if (currentValue.qntLabel == '>60' || Number(previousValue) > 60) {
                    skip = true;
                    previousValue = '>60';
                }
                if (currentValue.qntLabel == '>40') {
                    skip = true;
                    previousValue = '>40';
                }
                if (!skip)  {
                    previousValue = `${Number(previousValue) + currentValue.qnt}`;
                }
                return previousValue;
            }, '0')

--------------------------------------------------------------------
Добавить и удалить значение в массив useState:

const [open, setOpen] = useState<any>([]);

function handleTooltipOpen(event: any) {
    if (open.includes(Number(event.target.value))) {
        let index = open.indexOf(Number(event.target.value));
        setOpen([...open.splice(0,index), ...open.splice(index + 1)]);
    } else {
        setOpen([...open, Number(event.target.value)]);
    }
}