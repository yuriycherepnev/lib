реализация:
перетащить метод за методом asterisk search
+ asterisk ssh
(лишнее убрать и зарефакторить)

настроить передачу гет параметров

сделать фильтры по гет параметрам

--------------------------------------------------------------------
https://help.tyres.spb.ru/issues/73472
проверить весь проект
залить в понедельник 24.02

--------------------------------------------------------------------
trucktyres:

удалить детейлинг

урезать фукнкционал на главной
урезать функицонал в админке

удалить папку backend
удалить папку frontend (перенос логики из frontend в newfrontend)
очистить миграции

сделать проект более легко-поднимаемым



Минусы легаси тайреса:
1. мертворожденный проект
еще даже не создав проект - мы уже выстрелили себе в ногу

2. скорость создания проекта?

структура гудов отличается - разные параметры, с разными типами
- отсюда необохдима будет адаптация кода гудов и инк файлов тайреса под трактайрес 
- разная структура корзины и заказов - параметры и т.д. также необходима будет
адаптация кода, 
+ постоянный рефакторинг, проверка, тестирование


очень много спаянной логики
- примерка дисков, подбор по авто - эти параметры заходят в контроллер, участвуют в поиске и формировании данных на выходе,
прокидываются во вьюху, да, часть этой логики можно выключить просто не передавай на вход гет параметры для 
поиска соотвтетствующих данных,
но есть специфические запросы. Например: запрос на получение фильтров для подбора по авто идет по умолчанию
т.е. надо будет выключать куски логики, смотреть чтоб это не повлияло на
работу модуля, проверять, править и по новой.


есть специфическая логика например:
бренды для редиректа, 
забаненные модели, 
сдвоенные бренды и модели: ikon nokian, autograph 9 и т.д.

лоигка построения запросов поиска на основе специфических параметров:
runflat, spike и т.д.

разноширокие и многое другое
вся эта логика сильно спаяна с основной

также:
сервисы нам вроде как не нужны, но шиномонтаж нужен,
но шиномонтаж у нас не 1, на сервисы накручена логика детейлинга, которая сильно спаяна с основным проектом

Разная структура гудов:
разные параметры, разные типы полей - как это все подружить друг с другом неясно -
гуды с инк файлами, инк файлы с бд, бд с оформлением заказов, с exchange и т.д.

как итог: очень много времени будет тратиться на постоянный рефакторинг, проверку и тестирование.

3. 500 часов Кирилла улетают в мусорку

Плюсы:

1. время? 
вопрос спорный - т.к. я не знаю сколько времени займет привести тайрес в болваночное состояние на основе которого можно только начать реализовывать
рест апи логику.

2. работа в yii2.
Типо он нам знаком, типо вроде бы как быстро можно на нем писать.
Но, все другие факторы будут вставлять палки в колеса и скорость сильно будет падать.

3. Знакомый код - да, но в этом и проблема.
От этого знакомого кода тошнит. 

Я не уверен, что с точки зрения поддержки и разработки тайрес выигрышный вариант.


Минусы laravel:
1. незнакомый фреймворк - да, но это свежий фреймворк, много библиотек и готовых решений
как итог меньше костылей и лишней логики.

2. Время разработки: возможно получиться дольше, но на выходе мы получим более простой, легкий и поддерживаемый проект
который будет расти помодульно, и новая логика будет добовляться по требованию

Плюсы:

1. 300 часов Кирилла не улетают в мусорку
2. Есть готовые решения для поддержки рест апи и генерации документации
3. Создаем задел на перенос проектов на laravel на будущее

Также помимо прочего, exchange трактайреса надо будет подружить с тайресом (остатки, гуди и т.д.)
трактайрес лежит на мастере exchange, а тайрес лежит на нью мастере



