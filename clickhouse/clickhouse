clickhouse-client --password root --query "INSERT INTO tutorial.hits FORMAT TSV" --max_insert_block_size=100000 < ~/database/hits_v1.tsv
clickhouse-client --password root --query "INSERT INTO tutorial.visits FORMAT TSV" --max_insert_block_size=100000 < ~/database/visits_v1.tsv

clickhouse-client --password root --query "SELECT COUNT(*) FROM tutorial.visits"

clickhouse-client --password root --query "CREATE DATABASE IF NOT EXISTS seo"

SELECT COUNT(*) FROM tutorial.hits
SELECT COUNT(*) FROM tutorial.visits

source ~/database/hits.tsv;

SELECT COUNT(*) FROM tutorial.hits
SELECT COUNT(*) FROM tutorial.visits


CREATE TABLE tutorial.hits
(
    `time` UInt64,
    `url` String,
)
ENGINE = CollapsingMergeTree(sign)
PRIMARY KEY (author)


CREATE TABLE tutorial.hits_v1
(
    `WatchID` UInt64,
    `JavaEnable` UInt8
    `Title` String,
    `GoodEvent` Int16,
    `EventTime` DateTime,
    `EventDate` Date,
    `CounterID` UInt32,
    `ClientIP` UInt32,
    `ClientIP6` FixedString(16),
    `RegionID` UInt32,
    `UserID` UInt64,
    `CounterClass` Int8,
    `OS` UInt8,
    `UserAgent` UInt8,
    `URL` String,
    `Referer` String,
    `URLDomain` String,
    `RefererDomain` String,
    `Refresh` UInt8,
    `IsRobot` UInt8,
    `RefererCategories` Array(UInt16),
    `URLCategories` Array(UInt16),
    `URLRegions` Array(UInt32),
    `RefererRegions` Array(UInt32),
    `ResolutionWidth` UInt16,
    `ResolutionHeight` UInt16,
    `ResolutionDepth` UInt8,
    `FlashMajor` UInt8,
    `FlashMinor` UInt8,
    `FlashMinor2` String,
    `NetMajor` UInt8,
    `NetMinor` UInt8,
    `UserAgentMajor` UInt16,
    `UserAgentMinor` FixedString(2),
    `CookieEnable` UInt8,
    `JavascriptEnable` UInt8,
    `IsMobile` UInt8,
    `MobilePhone` UInt8,
    `MobilePhoneModel` String,
    `Params` String,
    `IPNetworkID` UInt32,
    `TraficSourceID` Int8,
    `SearchEngineID` UInt16,
    `SearchPhrase` String,
    `AdvEngineID` UInt8,
    `IsArtifical` UInt8,
    `WindowClientWidth` UInt16,
    `WindowClientHeight` UInt16,
    `ClientTimeZone` Int16,
    `ClientEventTime` DateTime,
    `SilverlightVersion1` UInt8,
    `SilverlightVersion2` UInt8,
    `SilverlightVersion3` UInt32,
    `SilverlightVersion4` UInt16,
    `PageCharset` String,
    `CodeVersion` UInt32,
    `IsLink` UInt8,
    `IsDownload` UInt8,
    `IsNotBounce` UInt8,
    `FUniqID` UInt64,
    `HID` UInt32,
    `IsOldCounter` UInt8,
    `IsEvent` UInt8,
    `IsParameter` UInt8,
    `DontCountHits` UInt8,
    `WithHash` UInt8,
    `HitColor` FixedString(1),
    `UTCEventTime` DateTime,
    `Age` UInt8,
    `Sex` UInt8,
    `Income` UInt8,
    `Interests` UInt16,
    `Robotness` UInt8,
    `GeneralInterests` Array(UInt16),
    `RemoteIP` UInt32,
    `RemoteIP6` FixedString(16),
    `WindowName` Int32,
    `OpenerName` Int32,
    `HistoryLength` Int16,
    `BrowserLanguage` FixedString(2),
    `BrowserCountry` FixedString(2),
    `SocialNetwork` String,
    `SocialAction` String,
    `HTTPError` UInt16,
    `SendTiming` Int32,
    `DNSTiming` Int32,
    `ConnectTiming` Int32,
    `ResponseStartTiming` Int32,
    `ResponseEndTiming` Int32,
    `FetchTiming` Int32,
    `RedirectTiming` Int32,
    `DOMInteractiveTiming` Int32,
    `DOMContentLoadedTiming` Int32,
    `DOMCompleteTiming` Int32,
    `LoadEventStartTiming` Int32,
    `LoadEventEndTiming` Int32,
    `NSToDOMContentLoadedTiming` Int32,
    `FirstPaintTiming` Int32,
    `RedirectCount` Int8,
    `SocialSourceNetworkID` UInt8,
    `SocialSourcePage` String,
    `ParamPrice` Int64,
    `ParamOrderID` String,
    `ParamCurrency` FixedString(3),
    `ParamCurrencyID` UInt16,
    `GoalsReached` Array(UInt32),
    `OpenstatServiceName` String,
    `OpenstatCampaignID` String,
    `OpenstatAdID` String,
    `OpenstatSourceID` String,
    `UTMSource` String,
    `UTMMedium` String,
    `UTMCampaign` String,
    `UTMContent` String,
    `UTMTerm` String,
    `FromTag` String,
    `HasGCLID` UInt8,
    `RefererHash` UInt64,
    `URLHash` UInt64,
    `CLID` UInt32,
    `YCLID` UInt64,
    `ShareService` String,
    `ShareURL` String,
    `ShareTitle` String,
    `ParsedParams` Nested(
        Key1 String,
        Key2 String,
        Key3 String,
        Key4 String,
        Key5 String,
        ValueDouble Float64),
    `IslandID` FixedString(16),
    `RequestNum` UInt32,
    `RequestTry` UInt8
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(EventDate)
ORDER BY (CounterID, EventDate, intHash32(UserID))
SAMPLE BY intHash32(UserID)

*********************************************************************************

clickhouse-client --multiline --multiquery

insert into test_array values ([1,2],[11,22],'Text');
insert into test_array values ([5,6],[55,66],'Text');

SELECT * FROM seo.test_array values;


CREATE TABLE seo.search_report
(
    `id_report` UInt64,
    `phrase` String,
    `date` UInt64,
    `id_geo` Array(UInt8)
    `searched_with` Nested(
        phrase String,
        shows String),
    `searched_also` Nested(
        phrase String,
        shows String),
)
ENGINE = MergeTree()
ORDER BY (id_report)


CREATE TABLE seo.search_report
(
    `id_report` UInt64,
    `phrase` String,
    `time` UInt64,
    `id_geo` Array(UInt8),
    `searched_with` Nested(
        phrase String,
        shows UInt8),
        
    `searched_also` Nested(
        phrase String,
        shows UInt8),

) ENGINE = MergeTree()
ORDER BY (id_report)


insert into seo.search_report values (
    666777888, 
    'Заточка хуечка', 
    666777888, 
    [10, 30], 
    ['Заточка хуечка', 'Заточка хуечка2'], 
    [300, 310], 
    ['Заточка хуечка', 'Заточка хуечка2'], 
    [300, 310], 
);

*********************************************************************************

select * from seo.search_report

drop table seo.search_report

CREATE TABLE seo.search_report
(
    `id_report` UInt64,
    `searched_also` Nested(
        phrase String,
        shows String),
) ENGINE = MergeTree()
ORDER BY (id_report)


insert into seo.search_report values (
    666777888, 
    ['sd', 'sd', 'sd'],
    ['sd', 'sd', 'sd']
    );


*********************************************************************************

select * from seo.search_report

drop table seo.search_report

CREATE TABLE seo.search_report
(
    `id_report` UInt64,
    `phrase` String,
    `time` UInt64,
    `id_geo` Array(UInt8),
) ENGINE = MergeTree()
ORDER BY (id_report)

insert into seo.search_report values (
    666777888, 
    'Заточка хуечка', 
    666777888, 
    [10, 30], 
    ['Заточка хуечка', 'Заточка хуечка2'], 
    [300, 310],
    ['Заточка хуечка', 'Заточка хуечка2'], 
    [300, 310]
);


insert into seo.search_report values (
    666777888, 
    'Заточка хуечка', 
    666777888, 
    [10, 30]
);

*********************************************************************************

select * from seo.search_report

drop table seo.search_report

CREATE TABLE seo.search_report
(
    `id_report` UInt64,
    `searched_with` Nested(
        phrase String,
        shows UInt8),

) ENGINE = MergeTree()
ORDER BY (id_report)

*********************************************************************************

$client = \Yii::$app->clickhouse;

$sql = "CREATE TABLE seo.search_report(
    `id_report` UInt64,
    `phrase` String,
    `time` UInt64,
    `id_geo` Array(UInt8),
    `searched_with` Nested(phrase String,shows UInt8),
    `searched_also` Nested(phrase String,shows UInt8)
    ) ENGINE = MergeTree() ORDER BY (id_report)";

$client->createCommand($sql)->execute();

$query = $client->createCommand()->insert('seo.search_report', [
    'id_report' => 666777888,
    'phrase' => 'Заточка хуечка',
    'time' => 666777888,
    'id_geo' => '[10, 30]',
    'searched_with.phrase' => '[10, 30]',
    'searched_with.shows' => '[10, 30]',
    'searched_also.phrase' => '[10, 30]',
    'searched_also.shows' => '[10, 30]',
]);

echo '<pre>';
var_dump($query->getRawSql());
die;

*********************************************************************************

drop table seo.wordstat_report

drop table seo.wordstat_searched_with

drop table seo.wordstat_searched_also