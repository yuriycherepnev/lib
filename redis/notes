* Резидентные вычисления - это подход, при котром данные обрабатываются в оперативной памяти, 
а не на диске, что значительно повышает скорость обработки данных.

* Резидентная СУБД - база данных, размещаемая в оперативной памяти. 

Redis (Remote Dictionary Service) - резидентная СУБД класса NoSQL, работающая со структурами данных типа ключ - значение.
Используется как для баз данных, так и для реализации кэшей, брокеров сообщений.

Все данные Redis хранит в виде словаря, в котором ключи связаны со своими значениями. 
Поддерживаются следующие абстрактные типы данных: 
- строки 
- списки 
- множества 
- хеш-таблицы 
- упорядоченные множества

Redis утрированно - большая хеш-мапа

* Недостатки - нет сложных запросов как и в любой NoSql (JOIN, where и т.д.)

Для чего используетя:
- хранение данных о юзерах
- LeaderBoard - таблица лидеров - хранит userId и очки в редисе в сортированном множестве
- каталог

Масштабирование redis:
- поднимаем redis в кластере серверов
- равноверно распределяем данные между узлами редиса
- redis из коробки предоставляет механизм чтобы запрос направлять на нужную машину кластера
- этот алгоритм называется consistent hashing

* Каждый отдельный узел кластера можно дополнительно реплицировать

Redis не дает консистентность данных по умолчанию
Redis асинхронно копирует данные на реплицированные сервера
Мы не знаем когда данные будут скопированы

* Консистентное состояние - данные согласованы и синхронизированы между узлами системы

Redis как и любая noSql база данных дает:
eventaul consictency - консистентность в конечном итоге
(это справедливо только в условиях кластера)

в redis можно повысить консистентность с помощью настроек

* Каждый запрос к приложению это всегда отдельный поток