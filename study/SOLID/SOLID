* Single Responsibility - принцип единственной ответственности.
Каждый модуль выполняет свою задачу. 
Если есть большой класс который выполняет много разных задач - его следует разбить на разные классы, 
которые можно будет потом переиспользовать. (модульность)

* Open/Close Principle - принцип открытости/закрытости.
программные сущности должны быть открыты для расширения, но закрыты для модификации.
Новый в функционал в классах появляется только за счет наследования, но не за счет изменений в классе.

* Liskov's Substitution Pronciple - принцип подстановки Лисков.
Наследующий класс должен дополнять, а не заменять поведение.
Если есть класс Б наследующий класс А то в коде они должны быть взаимозаменяемы.

* Interface Segregation - принцип разделения интерфейса.
Интерфейсы не должны быть громоздкими.
Для каждой сущности которая пользуется интрфейсом, должны быть только нужные ей методы.

* Dependency Inversion - принцип инверсии зависимостей.
Обьекты должны зависеть от абстракций, а не от реализаций.
Взаимодействие классов должно идти через интерфейс.