Создающие:

Статическая фабрика:
статический метод, содержащий в себе switch case для создания связанных или не очень обьектов.

Простая фабрика:
Не является статической
для каждого создаваемого класса свой метод
(на мой взгляд самый нежизнеспособный шаблон из всех фабрик)

Фабричный метод:
интерфейс для создающего метода, и классы реализующие этот интерфейс
Этот паттерн является «настоящим» Шаблоном Проектирования, 
потому что он следует «Принципу инверсии зависимостей» также известному как «D» в S.O.L.I.D.

Абстрактная фабрика:
создаются серии связанных или зависимых обьектов
Может возвращать массив созданных обьектов

Пример с оплатой:
Фабрика создает обьекты оплаты по типам (карта, сбп или др)
Каждый обьект оплаты, содержит в себе метод оплаты, который в зависимости
от банка создает соответствующий банку обьект для оплаты, который реализует интерфейс оплаты

Строитель: это интерфейс для производства частей сложного объекта.
Иногда, если Строитель лучше знает о том, что он строит, этот интерфейс может быть абстрактным классом с методами по-умолчанию (адаптер).

Прототип обьекта:
Помогает избежать затрат на создание объектов стандартным способом (new Foo()), а вместо этого создаёт прототип и затем клонирует его.

Одиночка:
Позволяет содержать только один экземпляр объекта в приложении, которое будет обрабатывать все обращения, запрещая создавать новый экземпляр.

Обьектный пул:
Порождающий паттерн, который предоставляет набор заранее инициализированных объектов, готовых к использованию («пул»), 
что не требует каждый раз создавать и уничтожать их.

----------------------------------------------------------

Структурные:

Адаптер:
Привести нестандартный или неудобный интерфейс какого-то класса в интерфейс, совместимый с вашим кодом. Адаптер позволяет классам работать вместе стандартным образом, что обычно не получается из-за несовместимых интерфейсов, предоставляя для этого прослойку с интерфейсом, удобным для клиентов, самостоятельно используя оригинальный интерфейс.

Примеры:
нормализовать данные нескольких различных веб-сервисов, в одинаковую структуру, как будто вы работаете со стандартным сервисом (например при работе с API соцсетей)
Адаптер клиентских библиотек для работы с базами данных

Мост:
Отделить абстракцию от её реализации так, что они могут изменяться независимо друг от друга.

Компоновщик:
Взаимодействие с иерархической группой объектов также, как и с отдельно взятым экземпляром.

Примеры:
Экземпляр класса Form обрабатывает все свои элементы формы, как будто это один экземпляр. И когда вызывается метод render(), он перебирает все дочерние элементы и вызывает их собственный render().

----------------------------------------------------------

На данном этапе для проработки паттерна мне хватит хорошего определения, пизженный схем и хорошо написанных кусков кода.

----------------------------------------------------------

Абстрактная фабрика (Abstract Factory)
Строитель (Builder)
Фабричный Метод (Factory Method)
Объектный пул (Pool)
Прототип (Prototype)
Простая Фабрика (Simple Factory)
Одиночка (Singleton)
Статическая Фабрика (Static Factory)

Преобразователь Данных (Data Mapper)
Внедрение Зависимости (Dependency Injection)
Фасад (Facade)
Текучий Интерфейс (Fluent Interface)
Приспособленец (Flyweight)
Прокси (Proxy)
Реестр (Registry)

Цепочка Обязанностей (Chain Of Responsibilities)
Команда (Command)
Интепретатор (Interpreter)
Итератор (Iterator)
Посредник (Mediator)
Хранитель (Memento)
Объект Null (Null Object)
Наблюдатель (Observer)
Спецификация (Specification)
Состояние (State)
Стратегия (Strategy)
Шаблонный Метод (Template Method)
Посетитель (Visitor)

----------------------------------------------------------

Адаптер (Adapter / Wrapper) +
Мост (Bridge) +
Декоратор (Decorator) +
Компоновщик (Composite) +
