* Если вы думаете, что хорошая архитектура дорогая,
то вам сначала следует попробовать плохую.

* Гексагональная и чистая архитектура были придуманы
чтобы устранить недостатки слоеной архитектуры.

* Чистая архитектура = гексагональная + слоеная

На границе каждого слоя должны быть интерфейсы
Интерфейсы это порты - через которые слои обмениваются информацией

слой - набор, множество классов

Entities - классы, обьекты, доменные области, предметные области (order, user)
UseCases - 

Entities + useCases = Domain, слой бизнес логики

Controller, presenters - это handler в Go
Gateways - это паттерн проектирования. В узком смысле это Repository

Внешний слой - база данных DB, сторонние сервисы WEB, пользовательский интерфейс UI и т.д.

Любая архитектура должна помогать, а не мешать
Как сказал сам Роберт Мартин - количество слоев может меняться как в большую, так и в меньшую сторону

Существует 3 правила которым должна соответствовать Clean Architecture:
1. Пересечение границ слоев - происходит с помощью DAO (data transfer object)
2. Слой бизнес логики не зависит ни от чего. Dependency Injection происходит только через интерфейс
3. Правило приоритета внутреннего слоя. Слой бизнес логики определяет интерфейс по которому
осуществляется взаимодействие бизнес логики с внешним миром.
Т.е. слой интерфейс который находится в бизнес логике определяет взаимодействие бизнес логики с внешним миром


